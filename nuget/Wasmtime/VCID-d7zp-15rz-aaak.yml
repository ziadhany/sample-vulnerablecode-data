vulnerability_id: VCID-d7zp-15rz-aaak
aliases:
  - CVE-2022-31104
  - GHSA-jqwc-c49r-4w2x
summary: Wasmtime is a standalone runtime for WebAssembly. In affected versions wasmtime's implementation
  of the SIMD proposal for WebAssembly on x86_64 contained two distinct bugs in the instruction
  lowerings implemented in Cranelift. The aarch64 implementation of the simd proposal is not
  affected. The bugs were presented in the `i8x16.swizzle` and `select` WebAssembly instructions.
  The `select` instruction is only affected when the inputs are of `v128` type. The correspondingly
  affected Cranelift instructions were `swizzle` and `select`. The `swizzle` instruction lowering
  in Cranelift erroneously overwrote the mask input register which could corrupt a constant
  value, for example. This means that future uses of the same constant may see a different value
  than the constant itself. The `select` instruction lowering in Cranelift wasn't correctly
  implemented for vector types that are 128-bits wide. When the condition was 0 the wrong instruction
  was used to move the correct input to the output of the instruction meaning that only the
  low 32 bits were moved and the upper 96 bits of the result were left as whatever the register
  previously contained (instead of the input being moved from). The `select` instruction worked
  correctly if the condition was nonzero, however. This bug in Wasmtime's implementation of
  these instructions on x86_64 represents an incorrect implementation of the specified semantics
  of these instructions according to the WebAssembly specification. The impact of this is benign
  for hosts running WebAssembly but represents possible vulnerabilities within the execution
  of a guest program. For example a WebAssembly program could take unintended branches or materialize
  incorrect values internally which runs the risk of exposing the program itself to other related
  vulnerabilities which can occur from miscompilations. We have released Wasmtime 0.38.1 and
  cranelift-codegen (and other associated cranelift crates) 0.85.1 which contain the corrected
  implementations of these two instructions in Cranelift. If upgrading is not an option for
  you at this time, you can avoid the vulnerability by disabling the Wasm simd proposal. Additionally
  the bug is only present on x86_64 hosts. Other aarch64 hosts are not affected. Note that s390x
  hosts don't yet implement the simd proposal and are not affected.
severities:
  - id: 635105
    reference_id: 949738
    scoring_system: cvssv2
    value: '6.8'
    scoring_elements: AV:N/AC:M/Au:N/C:P/I:P/A:P
  - id: 635103
    reference_id: 949738
    scoring_system: cvssv3
    value: '5.6'
    scoring_elements: CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L
references:
  - id: 949732
    url: https://docs.rs/wasmtime/latest/wasmtime/struct.Config.html#method.wasm_simd
    reference_id:
  - id: 949733
    url: https://github.com/bytecodealliance/wasmtime/pull/4317
    reference_id:
  - id: 949734
    url: https://github.com/bytecodealliance/wasmtime/pull/4318
    reference_id:
  - id: 949736
    url: https://github.com/webassembly/simd
    reference_id:
  - id: 949737
    url: https://webassembly.github.io/spec/
    reference_id:
  - id: 884448
    url: https://nvd.nist.gov/vuln/search/results?adv_search=true&isCpeNameSearch=true&query=cpe:2.3:a:bytecodealliance:cranelift-codegen:*:*:*:*:*:rust:*:*
    reference_id: cpe:2.3:a:bytecodealliance:cranelift-codegen:*:*:*:*:*:rust:*:*
  - id: 895328
    url: https://nvd.nist.gov/vuln/search/results?adv_search=true&isCpeNameSearch=true&query=cpe:2.3:a:bytecodealliance:wasmtime:*:*:*:*:*:rust:*:*
    reference_id: cpe:2.3:a:bytecodealliance:wasmtime:*:*:*:*:*:rust:*:*
  - id: 949738
    url: https://nvd.nist.gov/vuln/detail/CVE-2022-31104
    reference_id: CVE-2022-31104
  - id: 1180732
    url: https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-jqwc-c49r-4w2x
    reference_id: GHSA-jqwc-c49r-4w2x
weaknesses: []
